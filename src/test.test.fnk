{new} = import '@fink/js-interop/reflect.fnk'
{Promise, setTimeout} = import '@fink/js-interop/globals.fnk'
{String, Number} = import '@fink/js-interop/globals.fnk'
{error} = import '@fink/std-lib/error.fnk'


{describe, it, expect, any, mock, mock_fn, spy_on} = import './test.fnk'
{run_all_timers, to_equal, to_not_equal} = import './test.fnk'
{was_called, was_not_called, was_called_with, was_not_called_with} = import './test.fnk'
{was_last_called_with, was_not_last_called_with} = import './test.fnk'
{to_throw, to_not_throw} = import './test.fnk'



mock_test = mock_fn fn: 'testing'


mock '@fink/test'
  fn: dict:
    test: mock_test
  {virtual: true}



{test} = import '@fink/test'



describe 'test utils', fn:

  it 'equality', fn:
    expect
      'foobar'
      to_equal 'foobar'

    expect
      'foobar'
      to_not_equal 'spam'


  it 'tests mock funcs', fn:
    foo = mock_fn fn: false

    expect
      foo
      was_not_called

    foo 'bar'
    foo 'ni'

    expect
      foo
      was_called

    expect
      foo
      was_called_with any String

    expect
      foo
      was_not_called_with any Number

    expect
      foo
      was_called_with 'bar'

    expect
      foo
      was_last_called_with 'ni'

    expect
      foo
      was_not_last_called_with 'bar'


  it 'test mock module virtual', fn:
    test 'testing'
    expect
      mock_test
      was_called_with 'testing'


  it 'spies on obj funcs', fn:
    obj = {foo: fn: 'bar'}
    spy = spy_on obj , 'foo'

    expect
      obj.foo _
      to_equal 'bar'

    expect
      spy
      was_called



  it 'tests exceptions', fn:
    foo = mock_fn
      # istanbul ignore next
      fn msg:
        err = error msg
        throw err

    expect
      fn: foo 'test'
      to_throw 'test'

    expect
      fn: 'test'
      to_not_throw ()


  it 'runs timers', fn:
    # TODO: use std-lib/async sleep
    task = new Promise, fn resolve:
      setTimeout fn: resolve 'done'
      123456789

    run_all_timers _

    expect
      await task
      to_equal 'done'


