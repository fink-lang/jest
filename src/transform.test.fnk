{describe, it, expect, to_match_snapshot, to_throw} = import './test.fnk'
{process} = import './transform.fnk'



describe process, fn:

  it 'compiles fink', fn:
    {code, map} = process
      'foo = 1234 or spam'
      '/temp/src/foobar.fnk'
      {rootDir: '/temp/src'}

    expect
      {code, map}
      to_match_snapshot


  it 'compiles fink with cov', fn:
    {code, map} = process
      'foo = 1234 or spam'
      '/temp/src/foobar.fnk'
      {rootDir: '/temp/src'}
      {instrument: true}

    expect
      {code, map}
      to_match_snapshot


  it 'transforms mock imported from @fink/jest as jest.mock', fn:
    {code, map} = process
      "
        {it, mock, mock_fn, require_actual} = import '@fink/jest/test.fnk'

        mock './transform.fnk', fn: dict:
          foobar: mock_fn _
          shrub: require_actual './transform'

        foo = fn mock:
          mock 'not jest.mock'
      "
      '/temp/src/foobar.fnk'
      {rootDir: '/temp/src'}

    expect
      {code, map}
      to_match_snapshot


  it 'ignores transforming mock not imported from @fink/jest', fn:
    {code, map} = process
      "
        {mock, require_actual} = import './foobar.fnk'

        mock 'not a jest mock'
        require_actual 'not a module'
      "
      '/temp/src/foobar.fnk'
      {rootDir: '/temp/src'}

    expect
      {code, map}
      to_match_snapshot


  it 'ignores transforming mock not imported', fn:
    {code, map} = process
      "
        {mock} = spam 'ni'

        mock 'not a jest mock'
      "
      '/temp/src/foobar.fnk'
      {rootDir: '/temp/src'}

    expect
      {code, map}
      to_match_snapshot


  it 'handles larix errors', fn:
    expect
      fn: process '123 foo', 'foobar.fnk', {rootDir: './src'}
      to_throw "
        foobar.fnk:1:4
        1| 123 foo
               ^

        Expected ',' or indented new line or end of code"


  it 'handles loxia errors', fn:
    expect
      fn: process '123 = foo', 'foobar.fnk', {rootDir: './src'}
      to_throw "
        foobar.fnk:1:0
        1| 123 = foo
           ^

        Unable to transform 'assign ='"
