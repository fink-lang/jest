// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`process compiles fink 1`] = `
Object {
  "code": "const foo_0 = 1234 || spam;
exports.foo = foo_0;",
  "map": Object {
    "mappings": "AAAAA,MAAAA,KAAG,GAAG,QAANA,IAAAA;AAAAA,OAAAA,CAAAA,GAAAA,GAAAA,KAAAA",
    "names": Array [
      "foo",
    ],
    "sources": Array [
      "/temp/src/foobar.fnk",
    ],
    "sourcesContent": Array [
      "foo = 1234 or spam",
    ],
    "version": 3,
  },
}
`;

exports[`process compiles fink with cov 1`] = `
Object {
  "code": "/* istanbul ignore next */
function cov_2ozalsxixv() {
  var path = \\"/temp/src/foobar.fnk\\";
  var hash = \\"46903f76ea802de43c58a983fde0936845313022\\";
  var global = new Function(\\"return this\\")();
  var gcv = \\"__coverage__\\";
  var coverageData = {
    path: \\"/temp/src/foobar.fnk\\",
    statementMap: {
      \\"0\\": {
        start: {
          line: 1,
          column: 14
        },
        end: {
          line: 1,
          column: 26
        }
      },
      \\"1\\": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 20
        }
      }
    },
    fnMap: {},
    branchMap: {
      \\"0\\": {
        loc: {
          start: {
            line: 1,
            column: 14
          },
          end: {
            line: 1,
            column: 26
          }
        },
        type: \\"binary-expr\\",
        locations: [{
          start: {
            line: 1,
            column: 14
          },
          end: {
            line: 1,
            column: 18
          }
        }, {
          start: {
            line: 1,
            column: 22
          },
          end: {
            line: 1,
            column: 26
          }
        }],
        line: 1
      }
    },
    s: {
      \\"0\\": 0,
      \\"1\\": 0
    },
    f: {},
    b: {
      \\"0\\": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: [\\"/temp/src/foobar.fnk\\"],
      names: [\\"foo\\", \\"spam\\"],
      mappings: \\"AAAAA,MAAAA,KAAG,GAAG,QAAQC,IAAdD;AAAAA,QAAAA,GAAG,GAAHA\\",
      sourcesContent: [\\"foo = 1234 or spam\\"]
    },
    _coverageSchema: \\"1a1c01bbd47fc00a2c39e90264f33305004495a9\\",
    hash: \\"46903f76ea802de43c58a983fde0936845313022\\"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }

  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2ozalsxixv = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}

cov_2ozalsxixv();
const foo_0 =
/* istanbul ignore next */
(cov_2ozalsxixv().s[0]++,
/* istanbul ignore next */
(cov_2ozalsxixv().b[0][0]++, 1234) ||
/* istanbul ignore next */
(cov_2ozalsxixv().b[0][1]++, spam));

/* istanbul ignore next */
cov_2ozalsxixv().s[1]++;
exports.foo = foo_0;",
  "map": Object {
    "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA,MAAAA,KAAG;AAAA;AAAA;AAAG;AAAA;AAAA;AAAA,6BAANA,IAAM,CAAH,CAAHA;;;;AAAAA,OAAAA,CAAAA,GAAAA,GAAAA,KAAAA",
    "names": Array [
      "foo",
    ],
    "sources": Array [
      "/temp/src/foobar.fnk",
    ],
    "sourcesContent": Array [
      "foo = 1234 or spam",
    ],
    "version": 3,
  },
}
`;

exports[`process ignores transforming mock not imported 1`] = `
Object {
  "code": "const drec_0 = spam(\`ni\`);
drec_0.mock(\`not a jest mock\`);",
  "map": Object {
    "mappings": "AAAS,MAAA,MAAS,GAAT,IAAI,CAAJ,IAAI,CAAJ;AAAA,MAETA,CAFCA,IAAQ,CAETA,iBAFS",
    "names": Array [
      "mock",
    ],
    "sources": Array [
      "/temp/src/foobar.fnk",
    ],
    "sourcesContent": Array [
      "{mock} = spam 'ni'

mock 'not a jest mock'
",
    ],
    "version": 3,
  },
}
`;

exports[`process ignores transforming mock not imported from @fink/jest 1`] = `
Object {
  "code": "const {
  mock: mock_0
} = require(\\"./foobar.fnk\\");

const {
  require_actual: require_actual_0
} = require(\\"./foobar.fnk\\");

mock_0(\`not a jest mock\`);
require_actual_0(\`not a module\`);",
  "map": Object {
    "mappings": ";QAACA;;;;kBAAMC;;;AAEPD,MAAI,CAAJA,iBAAI,CAAJA;AACAC,gBAAc,CAAdA,cAAc,CAAdA",
    "names": Array [
      "mock",
      "require_actual",
    ],
    "sources": Array [
      "/temp/src/foobar.fnk",
    ],
    "sourcesContent": Array [
      "{mock, require_actual} = import './foobar.fnk'

mock 'not a jest mock'
require_actual 'not a module'
",
    ],
    "version": 3,
  },
}
`;

exports[`process transforms mock imported from @fink/jest as jest.mock 1`] = `
Object {
  "code": "require(\\"@fink/jest/test.js\\");

const {
  mock: mock_0
} = require(\\"@fink/jest/test.js\\");

const {
  mock_fn: mock_fn_0
} = require(\\"@fink/jest/test.js\\");

const {
  require_actual: require_actual_0
} = require(\\"@fink/jest/test.js\\");

/* istanbul ignore next */
jest.mock(\`./transform.fnk\`, () => {
  const val_1 = mock_fn_0();
  const val_0 =
  /* istanbul ignore next */
  jest.requireActual(\`./transform\`);
  /* istanbul ignore next */

  return {
    foobar: val_1,
    shrub: val_0
  };
});

const foo_0 = (mock_1) => {
  const result_1 = mock_1(\`not jest.mock\`);
  /* istanbul ignore next */

  return result_1;
};

exports.foo = foo_0;",
  "map": Object {
    "mappings": ";;;QAAKA;;;;WAAMC;;;;kBAASC;;;AAEpBF;AAAAA,UAAI,iBAAJA,EAAwB,MAAA;AACd,QAAA,KAAS,GAAT,SAAA,EAAA;AACD,QAAA,KAA4B;AAA5B;AAAA,qBAAA,aAAA,CAAA;AAFe;;AAAI,SAAA;AAC1BG,IAAAA,MAD0B,EAAA,KAAA;AAE1BC,IAAAA,KAF0B,EAEnB;AAFmB,GAAA;AAA5BJ,CAAAA;;AAIAK,MAAAA,KAAG,GAAML,CAAAA,MAAH,KAAA;AACJ,QAAA,QACF,GADE,MAAI,CAAJ,eAAI,CAAJ;AADI;;AACJ,SAAA,QAAA;AADFK,CAAAA;;AAAAA,OAAAA,CAAAA,GAAAA,GAAAA,KAAAA",
    "names": Array [
      "mock",
      "mock_fn",
      "require_actual",
      "foobar",
      "shrub",
      "foo",
    ],
    "sources": Array [
      "/temp/src/foobar.fnk",
    ],
    "sourcesContent": Array [
      "{it, mock, mock_fn, require_actual} = import '@fink/jest/test.fnk'

mock './transform.fnk', fn: rec:
  foobar: mock_fn _
  shrub: require_actual './transform'

foo = fn mock:
  mock 'not jest.mock'
",
    ],
    "version": 3,
  },
}
`;

exports[`process transforms renamed imports from @fink/jest as jest.mock 1`] = `
Object {
  "code": "require(\\"@fink/jest/test.js\\");

const {
  mock: mock_mod_0
} = require(\\"@fink/jest/test.js\\");

const {
  mock_fn: mock_fn_0
} = require(\\"@fink/jest/test.js\\");

const {
  require_actual: imp_real_mod_0
} = require(\\"@fink/jest/test.js\\");

/* istanbul ignore next */
jest.mock(\`./transform.fnk\`, () => {
  const val_1 = mock_fn_0();
  const val_0 =
  /* istanbul ignore next */
  jest.requireActual(\`./transform\`);
  /* istanbul ignore next */

  return {
    foobar: val_1,
    shrub: val_0
  };
});

const foo_0 = (mock_mod_1) => {
  const result_1 = mock_mod_1(\`not jest.mock\`);
  /* istanbul ignore next */

  return result_1;
};

exports.foo = foo_0;",
  "map": Object {
    "mappings": ";;;QAAWA;;;;WAAUC;;;;kBAAyBC;;;AAE9CF;AAAAA,UAAQ,iBAARA,EAA4B,MAAA;AAClB,QAAA,KAAS,GAAT,SAAA,EAAA;AACD,QAAA,KAA0B;AAA1B;AAAA,qBAAA,aAAA,CAAA;AAFmB;;AAAI,SAAA;AAC9BG,IAAAA,MAD8B,EAAA,KAAA;AAE9BC,IAAAA,KAF8B,EAEvB;AAFuB,GAAA;AAAhCJ,CAAAA;;AAIAK,MAAAA,KAAG,GAAML,CAAAA,UAAH,KAAA;AACJ,QAAA,QACF,GADE,UAAQ,CAAR,eAAQ,CAAR;AADI;;AACJ,SAAA,QAAA;AADFK,CAAAA;;AAAAA,OAAAA,CAAAA,GAAAA,GAAAA,KAAAA",
    "names": Array [
      "mock_mod",
      "mock_fn",
      "imp_real_mod",
      "foobar",
      "shrub",
      "foo",
    ],
    "sources": Array [
      "/temp/src/foobar.fnk",
    ],
    "sourcesContent": Array [
      "{it, mock: mock_mod, mock_fn, require_actual: imp_real_mod} = import '@fink/jest/test.fnk'

mock_mod './transform.fnk', fn: rec:
  foobar: mock_fn _
  shrub: imp_real_mod './transform'

foo = fn mock_mod:
  mock_mod 'not jest.mock'
",
    ],
    "version": 3,
  },
}
`;
