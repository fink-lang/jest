{describe: jest_describe, it: jest_it, jest: jest_} = import '@jest/globals'
{expect: jest_expect} = import '@jest/globals'


[no_result] = []


it_delegate = fn it: fn descr, test, timeout:
  it
    descr
    fn ...args:
      await test ...args
      no_result
    timeout


describe_delegate = fn describe: fn descr, tests:
  describe descr, fn ...args:
    tests ...args
    no_result


describe = describe_delegate jest_describe
it = it_delegate jest_it


skip = dict:
  describe: describe_delegate jest_describe.skip
  it: it_delegate jest_it.skip


only = dict:
  describe: describe_delegate jest_describe.only
  it: it_delegate jest_it.only


any = jest_expect.any

mock_fn = jest_.fn

mock = jest_.mock

spy_on = jest_.spyOn

require_actual = jest_.require_actual


to_equal = fn expected: fn expect_actual:
  expect_actual.toEqual expected

to_not_equal = fn expected: fn expect_actual:
  expect_actual.not.toEqual expected



to_match_snapshot = fn expect_actual:
  expect_actual.toMatchSnapshot ()



was_called = fn expect_actual:
  expect_actual.toBeCalled ()

was_not_called = fn expect_actual:
  expect_actual.not.toBeCalled ()



was_called_with = fn ...expected: fn expect_actual:
  expect_actual.toHaveBeenCalledWith ...expected

was_not_called_with = fn ...expected: fn expect_actual:
  expect_actual.not.toHaveBeenCalledWith ...expected



was_last_called_with = fn ...expected: fn expect_actual:
  expect_actual.toHaveBeenLastCalledWith ...expected

was_not_last_called_with = fn ...expected: fn expect_actual:
  expect_actual.not.toHaveBeenLastCalledWith ...expected



to_throw = fn expected: fn expect_actual:
  expect_actual.toThrow expected

to_not_throw = fn expected: fn expect_actual:
  expect_actual.not.toThrow expected


run_all_timers = jest_.runAllTimers


expect = fn actual, expectation:
  expectation jest_expect actual
