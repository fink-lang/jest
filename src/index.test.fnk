{describe, it, skip, only, expect, any, mock, mock_fn} = import '.'
{to_match_snapshot, to_equal, to_not_equal} = import '.'
{was_called, was_not_called, was_called_with, was_not_called_with} = import '.'
{to_throw, to_not_throw} = import '.'


mock_test = mock_fn fn: 'testing'

mock '@fink/test'
  fn: dict:
    test: mock_test
  {virtual: true}

{test} = import '@fink/test'


only.describe 'test utils', fn:

  only.it 'equality', fn:
    expect
      'foobar'
      to_equal 'foobar'

    expect
      'foobar'
      to_not_equal 'spam'


  only.it 'tests mock funks', fn:
    foo = mock_fn fn: null

    expect
      foo
      was_not_called

    foo 'bar'

    expect
      foo
      was_called

    expect
      foo
      was_called_with any String

    expect
      foo
      was_not_called_with any Number

    expect
      foo
      was_called_with 'bar'


  only.it 'test mock module', fn:
    test 'testing'
    expect
      mock_test
      was_called_with 'testing'


  only.it 'tests exceptions', fn:
    foo = mock_fn
      # istanbul ignore next
      fn msg:
        throw new Error msg
        null

    expect
      fn: foo 'test'
      to_throw 'test'

    expect
      fn: 'test'
      to_not_throw()

  skip.it 'skips',
    # istanbul ignore next
    fn:
      throw new Error 'fail'
      null


skip.describe 'test utils', fn:
  undefined