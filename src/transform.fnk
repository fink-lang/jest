{transformSync: babelTransform} = import '@babel/core'
{parse} = import '@fink/larix'
{generate} = import '@fink/loxia'

babel_istanbul = import 'babel-plugin-istanbul'


istanbul_plugin = fn cwd, input_source_map:
  list:
    babel_istanbul
    dict:
      cwd
      include: ['**/*.fnk']
      extension: '.fnk'
      inputSourceMap: input_source_map


transform = fn source, filename:
  parse_result = parse source, filename

  ast = match parse_result:
    # TODO investigate why istanbul thinks we are not covering else
    # istanbul ignore else
    [{}, {errors: {length: 0}}]:
      [ast] = parse_result
      ast

    else:
      [, parse_ctx] = parse_result
      {errors: [{error, stack}]} = parse_ctx

      err = new SyntaxError error
      Object.assign err, {stack: '${error}${stack}'}
      throw err

  generate ast, filename, source


process = fn src, filename, {rootDir}, transform_opts:
  {code: js_code, map: input_source_map} = transform src, filename

  plugins = match transform_opts:
    {instrument: true}:
      [istanbul_plugin rootDir, input_source_map]
    else:
      []

  opts = dict:
    filename
    sourceMap: true,
    inputSourceMap: input_source_map
    auxiliaryCommentBefore: ' istanbul ignore next '
    plugins

  babelTransform js_code, opts

