{transformSync: babel_transform} = import '@babel/core'
{identifier, memberExpression} = import '@babel/types'

{parse} = import '@fink/larix/parser.fnk'
{generate} = import '@fink/loxia/generate.fnk'

{starts_with} = import '@fink/std-lib/str.fnk'

{throw_err, error} = import '@fink/js-interop/errors.js'
{is_instance} = import '@fink/js-interop/reflect.js'
{Error} = import '@fink/js-interop/globals.js'


babel_istanbul = import 'babel-plugin-istanbul'

[no_result] = []

is_error =  fn err: is_instance err, Error


istanbul_plugin = fn cwd, input_source_map:
  list:
    babel_istanbul
    rec:
      cwd
      include: ['**/*.fnk']
      extension: '.fnk'
      inputSourceMap: input_source_map


module_scope = fn scope:
  match scope:
    {parent: {}}: module_scope scope.parent
    else: scope


is_import_from_fink_jest = fn init:
  match init:
   {callee: {name: 'require'}, arguments: [{value: starts_with ?, '@fink/jest/'}]}:
      true
    else:
      false


is_imported = fn ident, name:
  {bindings} = module_scope ident.scope
  match bindings.(name):
    {referencePaths: not ?.includes ident}:
      false
    {path: {node: {init: is_import_from_fink_jest ?}}}:
      true
    else:
      false


mock_plugin = fn:
  rec:
    visitor: rec:
      CallExpression: fn path:
        callee = path.get 'callee'
        match callee:
          {node: {name: ? != 'mock'}}:
            false

          is_imported ?, 'mock':
            callee.replaceWith
              memberExpression
                identifier 'jest'
                identifier 'mock'
        no_result


require_actual_plugin = fn:
  rec:
    visitor: rec:
      CallExpression: fn path:
        callee = path.get 'callee'
        match callee:
          {node: {name: ? != 'require_actual'}}:
            false

          is_imported ?, 'require_actual':
            callee.replaceWith
              memberExpression
                identifier 'jest'
                identifier 'requireActual'
        no_result



handle_error = fn obj_with_errors:
  match obj_with_errors:
    {errors: [{}]}:
      {errors: [err]} = obj_with_errors
      match err:
        is_error ?:
          throw_err err
        else:
          throw_err error err.error, {stack: err.stack}
    else:
      obj_with_errors


transform = fn source, filename:
  ast = parse source, filename
  handle_error ast
  opts = rec:
    module_type: 'cjs'
    source_maps: true
    import: {ext: {abs: '.js', rel: '.fnk'}}

  compiled = generate ast, filename, source, opts
  handle_error compiled


process = fn src, filename, {rootDir}, transform_opts:
  {code: js_code, source_map} = transform src, filename

  plugins = match transform_opts:
    {instrument: true}:
      [mock_plugin, require_actual_plugin, istanbul_plugin rootDir, source_map]
    else:
      [mock_plugin, require_actual_plugin]


  opts = rec:
    filename
    sourceMap: true,
    inputSourceMap: source_map
    auxiliaryCommentBefore: ' istanbul ignore next '
    plugins

  # TODO can we use transformFromAstSync with ast from loxia
  # TODO instead of having to reparse generated js
  foo = babel_transform js_code, opts
  foo

